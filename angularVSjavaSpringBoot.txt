### Arborescence propre pour un projet Angular et Java Spring Boot ###

/mon-projet/
│
├── frontend-angular/                   # Projet Angular (front-end)
│   ├── src/
│   │   ├── app/
│   │   │   ├── components/
│   │   │   │   └── user/
│   │   │   │       ├── user.component.ts       # Composant Angular
│   │   │   │       ├── user.component.html     # Template HTML
│   │   │   │       └── user.component.scss     # Style SCSS
│   │   │   ├── services/
│   │   │   │   └── user.service.ts             # Service HTTP vers API Spring
│   │   │   ├── models/
│   │   │   │   ├── user.ts                     # Interface User (modèle partagé)
│   │   │   │   └── user-status.enum.ts         # Enum partagé (statuts, rôles…)
│   │   │   ├── utils/
│   │   │   │   └── format-date.util.ts         # Fonctions utilitaires (ex. affichage)
│   │   │   └── app.module.ts                   # Déclaration des composants/services
│   │   └── environments/
│   │       ├── environment.ts                  # Variables d'environnement (dev)
│   │       └── environment.prod.ts             # Variables d'environnement (prod)
│   └── angular.json                            # Configuration Angular CLI
│
└── backend-springboot/                         # Projet Spring Boot (back-end)
    ├── src/
    │   └── main/
    │       ├── java/com/example/
    │       │   ├── controller/
    │       │   │   └── UserController.java       # REST Controller
    │       │   ├── service/
    │       │   │   └── UserService.java          # Logique métier
    │       │   ├── repository/
    │       │   │   └── UserRepository.java       # DAO (accès base)
    │       │   ├── model/
    │       │   │   ├── User.java                 # Entité JPA (modèle partagé)
    │       │   │   └── UserStatus.java           # Enum partagé (status, rôles…)
    │       │   ├── dto/
    │       │   │   └── UserDTO.java              # Data Transfer Object
    │       │   ├── validator/
    │       │   │   └── UserValidator.java        # Validations personnalisées
    │       │   ├── util/
    │       │   │   └── DateFormatter.java        # Classe utilitaire (format date, etc.)
    │       │   └── MonProjetApplication.java     # Classe principale Spring Boot
    │       └── resources/
    │           ├── application.properties        # Configuration Spring
    │           └── messages.properties           # Messages de validation ou i18n
    └── pom.xml                                   # Dépendances Maven





Comme vous pouvez le constater, certain concept :
    - Service,
    - model,
    - DTO,
sont ce qu'on appel des "concepts partagés" entre Angular et Java Spring Boot dont voici une liste presque complète (je fais au mieux :p) :

| Concept                         | Côté Angular (Front-end)                          | Côté Spring Boot (Back-end)                             | 🔍 Rôle commun ou correspondance 
|---------------------------------|---------------------------------------------------|---------------------------------------------------------|----------------------------------
| **Models / Entities**           | `user.ts` (interface ou classe)                   | `User.java` (entité JPA ou DTO)                         | Représentent les données échangées (JSON) 
| **Services**                    | `user.service.ts` (Appels API REST)               | `UserService.java` (Logique métier)                     | Séparent la logique métier / API 
| **Enums**                       | `user-status.enum.ts`                             | `UserStatus.java` (enum)                                | Valeurs constantes partagées (ex : rôles, statuts) 
| **Validation**                  | `Validators.required`, `FormGroup`, etc.          | `@Valid`, `@NotNull`, `@Email`, etc.                    | Vérifient la validité des données saisies 
| **Routing**                     | `RouterModule`, `routes`                          | `@GetMapping("/api/...")`, `@PostMapping(...)`          | Gèrent les chemins (UI côté Angular, API côté Spring) 
| **Utils / Helpers**             | Fichiers `.util.ts` (formatage, dates, etc.)      | Classes `.java` (utilitaires métiers, formatage, etc.)  | Regroupent des fonctions réutilisables 
| **Configuration**               | `environment.ts`, `environment.prod.ts`           | `application.properties` ou `application.yml`           | Définissent des variables par environnement 
| **DTOs (modèles de transfert)** | Interfaces TypeScript pour formulaire ou API      | Classes Java `UserDTO`                                  | Représentent les objets échangés sans exposer les entités internes 
| **Formulaires / Champs**        | `FormControl`, `ReactiveFormsModule`              | `@RequestBody`, `@ModelAttribute`, `BindingResult`      | Transfert de données utilisateur 





Pour vous aider comprendre les différences sur le concept partagé le plus important (d'après moi), je vais vous expliquer la différence entre un service Angular et un service JavaSB :

1. Le service Angular :

    - Fait des appels HTTP (GET, POST, etc.) vers des endpoints REST exposés par Spring Boot. 
    
    Ex :

        // Angular
        user.service.ts → http.get('/api/users')



2. Le contrôleur Spring Boot (@RestController)

    - Reçoit la requête HTTP venant d’Angular.
    - Il ne communique pas directement avec la base de données.
    - Il délègue à un service Java (@Service) pour appliquer la logique métier.

    Ex :

        // Spring Boot
        UserController.java → appelle → UserService.java



3. Le service Java Spring Boot (@Service)

    - Contient la logique métier.
    - Il utilise un repository (UserRepository) pour accéder à la base de données.

    Ex :

        UserService.java → appelle → UserRepository.java → base de données



Résumé visuel :

    [Angular Service]
            ↓ HTTP
    [Spring Boot Controller]
            ↓ méthode Java
    [Spring Boot Service]
            ↓ méthode Java
    [Spring Boot Repository]
            ↓ accès
    [Base de données]



Pourquoi cette structure est importante :

    - Le contrôleur ne fait que recevoir la requête et rediriger vers le bon service.
    - Le service Java gère toute la logique métier (ex : vérifier qu’un email est unique, etc.).
    - Le repository fait uniquement le lien avec la base de données (via Spring Data JPA).





### CONNEXION ANGULAR AVEC JAVA SB ###

Angular ne se connecte pas directement à Spring Boot, il consomme les API exposées par les @RestController de Spring Boot.
    Autrement dit :

        - Spring Boot expose des endpoints HTTP grâce aux @RestController (par exemple, GET /api/patients),
        - Angular envoie des requêtes HTTP (via HttpClient) pour consommer ces endpoints,
        - Et la communication se fait par des API RESTful (JSON en général).

    En résumé :

        - @RestController = Point d’entrée côté backend pour les requêtes HTTP.
        - HttpClient (Angular) = Client HTTP qui fait des appels vers ces points d’entrée.



1. Créer le Backend Spring Boot (API REST)

    Exemple de contrôleur REST :

        @RestController
        @RequestMapping("/api/patients")
        public class PatientController {

            @GetMapping
            public List<String> getAllPatients() {
                return List.of("Jean Dupont", "Marie Curie");
            }

            @PostMapping
            public String addPatient(@RequestBody String patientName) {
                // Sauvegarde en base fictive
                return "Patient ajouté : " + patientName;
            }
        }

Endpoint GET : http://localhost:8080/api/patients
Endpoint POST : http://localhost:8080/api/patients



2. Configurer CORS dans Spring Boot (pour accepter les appels du frontend)

        @Configuration
        public class CorsConfig {
            @Bean
            public WebMvcConfigurer corsConfigurer() {
                return new WebMvcConfigurer() {
                    @Override
                    public void addCorsMappings(CorsRegistry registry) {
                        registry.addMapping("/api/**")
                                .allowedOrigins("http://localhost:4200") // Port de l'app Angular
                                .allowedMethods("GET", "POST", "PUT", "DELETE");
                    }
                };
            }
        }



3. Créer le Frontend Angular

    Exemple de service pour consommer les endpoints :

        import { Injectable } from '@angular/core';
        import { HttpClient } from '@angular/common/http';
        import { Observable } from 'rxjs';

        @Injectable({
        providedIn: 'root'
        })

        export class PatientService {   
            private apiUrl = 'http://localhost:8080/api/patients';

            constructor(private http: HttpClient) {}

            getPatients(): Observable<string[]> {
            return this.http.get<string[]>(this.apiUrl);
            }

            addPatient(name: string): Observable<string> {
            return this.http.post<string>(this.apiUrl, name);
            }
        }


    Exemple de consommation dans un composant :

        import { Component, OnInit } from '@angular/core';
        import { PatientService } from 'src/app/services/patient.service';

        @Component({
            selector: 'app-patient-list',
            template: `
            <h2>Liste des patients</h2>
            <ul>
            <li *ngFor="let patient of patients">{{ patient }}</li>
            </ul>
            <input [(ngModel)]="newPatient" placeholder="Nom du patient" />
            <button (click)="addPatient()">Ajouter</button>
            `
        })

        export class PatientListComponent implements OnInit {
            patients: string[] = [];
            newPatient: string = '';

            constructor(private patientService: PatientService) {}

            ngOnInit() {
                this.loadPatients();
            }

            loadPatients() {
                this.patientService.getPatients().subscribe(data => this.patients = data);
            }

            addPatient() {
                this.patientService.addPatient(this.newPatient).subscribe(response => {
                console.log(response);
                this.loadPatients();
                });
            }
        }



4. Ne pas oublier d’importer HttpClientModule dans app.module.ts :

    import { HttpClientModule } from '@angular/common/http';
    @NgModule({
        declarations: [/* components */],
        imports: [BrowserModule, HttpClientModule],
        bootstrap: [/* AppComponent */]
    })
    export class AppModule {}



5. Démarrer les deux projets

    Backend Spring Boot :
        mvn spring-boot:run

    Frontend Angular :
        ng serve



En résumé :

    - Le frontend utilise HttpClient pour faire des requêtes HTTP vers les endpoints du backend.
    - Le backend expose des endpoints REST via @RestController.
    - CORS doit être configuré pour permettre la communication entre deux serveurs différents.